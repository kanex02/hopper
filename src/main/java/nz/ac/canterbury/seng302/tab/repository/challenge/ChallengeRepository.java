package nz.ac.canterbury.seng302.tab.repository.challenge;

import nz.ac.canterbury.seng302.tab.pojo.TopHopperDTO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import nz.ac.canterbury.seng302.tab.entity.UserEntity;
import nz.ac.canterbury.seng302.tab.entity.challenge.Challenge;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Repository class for {@link Challenge}s.
 */
public interface ChallengeRepository extends CrudRepository<Challenge, Long> {

    /**
     * Finds all challenges currently saved
     *
     * @return Returns a list of all challenges in the repository
     */
    List<Challenge> findAll();


    /**
     * Finds challenge by its id
     *
     * @return Returns the challenge or null if no challenge found
     */
    Challenge findChallengeById(Long id);


    /**
     * Query for finding all challenges that have been generated for a user, or that the user has been invited to
     *
     * @param userEntity The user to find challenges generated for
     * @return a list of all challenges that have been generated for the user, or that the user has been invited to
     */
    @Query("SELECT c FROM challenge c LEFT JOIN c.userCompletionStatuses cs WHERE c.userGeneratedFor = :userEntity OR cs.user = :userEntity")
    List<Challenge> findChallengesForUser(@Param("userEntity") UserEntity userEntity);


    /**
     * Finds all challenges that have been generated by a user that are not yet complete
     *
     * @param userEntity The user to find challenges for
     * @param complete   Whether the challenges should be complete or not
     * @return Returns a list of all challenges that have been generated by the user that are not yet complete
     */
    @Query("SELECT c FROM challenge c LEFT JOIN c.userCompletionStatuses cs WHERE (c.userGeneratedFor = :userEntity OR cs.user = :userEntity) AND c.isComplete = :complete")
    List<Challenge> findChallengeByUserGeneratedForAndIsComplete(UserEntity userEntity, boolean complete);


    /**
     * Queries the top hoppers since a given date as {@link TopHopperDTO}s
     *
     * @param pageable      The page to return
     * @param cutoffDate    The date to start counting from
     * @return              A page of top hoppers
     */
    @Query("SELECT new nz.ac.canterbury.seng302.tab.pojo.TopHopperDTO(cs.user, SUM(cs.challenge.hops), MAX(c.completedDate)) " +
            "FROM ChallengeCompletionStatus cs " +
            "JOIN cs.challenge c ON cs.challenge.id = c.id " +
            "WHERE c.isComplete AND c.completedDate >= :cutoffDate " +
            "GROUP BY cs.user " +
            "ORDER BY SUM(cs.challenge.hops) DESC, MAX(c.completedDate) ASC")
    Page<TopHopperDTO> findTopHoppersSinceCutoffDate(
            Pageable pageable,
            @Param("cutoffDate") LocalDateTime cutoffDate);


    /**
     * Queries the user's leaderboard data since a given date as a {@link TopHopperDTO}
     * @param pageable      The page to return
     * @param cutoffDate    The date to start counting from
     * @return              A page of the user's leaderboard data
     */
    @Query("SELECT new nz.ac.canterbury.seng302.tab.pojo.TopHopperDTO(cs.user, SUM(cs.challenge.hops), MAX(c.completedDate)) " +
            "FROM ChallengeCompletionStatus cs " +
            "JOIN cs.challenge c ON cs.challenge.id = c.id " +
            "WHERE c.isComplete AND c.completedDate >= :cutoffDate AND cs.user = :user " +
            "GROUP BY cs.user " +
            "ORDER BY SUM(cs.challenge.hops) DESC, MAX(c.completedDate) ASC")
    Page<TopHopperDTO> findUserAsTopHopperSinceCutoffDate(
            Pageable pageable,
            @Param("cutoffDate") LocalDateTime cutoffDate,
            @Param("user") UserEntity user);
}
